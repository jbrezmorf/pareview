<ServerManagerConfiguration>
  <ProxyGroup name="sources">
    <SourceProxy name="DoubleHelixSource" class="vtkPythonProgrammableFilter" label="Double Helix Source">

      <Documentation
        long_help="An example that draws a double helix with connecting lines (like DNA)."
        short_help="An example that draws a double helix with connecting lines (like DNA).">
      </Documentation>




      <DoubleVectorProperty
        name="Length"
        label="Length"
        initial_string="Length"
        command="SetParameter"
        animateable="1"
        default_values="8.0"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>


      <IntVectorProperty
        name="Number_of_points"
        label="Number of points"
        initial_string="Number_of_points"
        command="SetParameter"
        animateable="1"
        default_values="80"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>


      <DoubleVectorProperty
        name="Phase_shift"
        label="Phase shift"
        initial_string="Phase_shift"
        command="SetParameter"
        animateable="1"
        default_values="1.5"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>


      <DoubleVectorProperty
        name="Rounds"
        label="Rounds"
        initial_string="Rounds"
        command="SetParameter"
        animateable="1"
        default_values="3.0"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>




      <!-- Output data type: "vtkPolyData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="0"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="&#xA;#This script generates a helix double.&#xA;#This is intended as the script of a 'Programmable Source'&#xA;import math&#xA;&#xA;numPts = Number_of_points # Points along each Helix&#xA;length = float(Length) # Length of each Helix&#xA;rounds = float(Rounds) # Number of times around&#xA;phase_shift = math.pi/Phase_shift # Phase shift between Helixes&#xA;&#xA;#Get a vtk.PolyData object for the output&#xA;pdo = self.GetPolyDataOutput()&#xA;&#xA;#This will store the points for the Helix&#xA;newPts = vtk.vtkPoints()&#xA;for i in range(0, numPts):&#xA;   #Generate Points for first Helix&#xA;   x = i*length/numPts&#xA;   y = math.sin(i*rounds*2*math.pi/numPts)&#xA;   z = math.cos(i*rounds*2*math.pi/numPts)&#xA;   newPts.InsertPoint(i, x,y,z)&#xA;&#xA;   #Generate Points for second Helix. Add a phase offset to y and z.&#xA;   y = math.sin(i*rounds*2*math.pi/numPts+phase_shift)&#xA;   z = math.cos(i*rounds*2*math.pi/numPts+phase_shift)&#xA;   #Offset Helix 2 pts by 'numPts' to keep separate from Helix 1 Pts&#xA;   newPts.InsertPoint(i+numPts, x,y,z)&#xA;&#xA;#Add the points to the vtkPolyData object&#xA;pdo.SetPoints(newPts)&#xA;&#xA;#Make two vtkPolyLine objects to hold curve construction data&#xA;aPolyLine1 = vtk.vtkPolyLine()&#xA;aPolyLine2 = vtk.vtkPolyLine()&#xA;&#xA;#Indicate the number of points along the line&#xA;aPolyLine1.GetPointIds().SetNumberOfIds(numPts)&#xA;aPolyLine2.GetPointIds().SetNumberOfIds(numPts)&#xA;for i in range(0,numPts):&#xA;   #First Helix - use the first set of points&#xA;   aPolyLine1.GetPointIds().SetId(i, i)&#xA;   #Second Helix - use the second set of points&#xA;   #(Offset the point reference by 'numPts').&#xA;   aPolyLine2.GetPointIds().SetId(i,i+numPts)&#xA;&#xA;#Allocate the number of 'cells' that will be added.&#xA;#Two 'cells' for the Helix curves, and one 'cell'&#xA;#for every 3rd point along the Helixes.&#xA;links = range(0,numPts,3)&#xA;pdo.Allocate(2+len(links), 1)&#xA;&#xA;#Add the poly line 'cell' to the vtkPolyData object.&#xA;pdo.InsertNextCell(aPolyLine1.GetCellType(), aPolyLine1.GetPointIds())&#xA;pdo.InsertNextCell(aPolyLine2.GetCellType(), aPolyLine2.GetPointIds())&#xA;&#xA;for i in links:&#xA;   #Add a line connecting the two Helixes.&#xA;   aLine = vtk.vtkLine()&#xA;   aLine.GetPointIds().SetId(0, i)&#xA;   aLine.GetPointIds().SetId(1, i+numPts)&#xA;   pdo.InsertNextCell(aLine.GetCellType(), aLine.GetPointIds())&#xA;"
        panel_visibility="advanced">
        <Hints>
         <Widget type="multi_line"/>
       </Hints>
      <Documentation>This property contains the text of a python program that
      the programmable source runs.</Documentation>
      </StringVectorProperty>


    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
